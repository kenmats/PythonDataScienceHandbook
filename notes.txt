installed miniconda and jupyternotebook
jupyter notebook and ipython are bundled
ipython - integrated python notebook
	? character to explore documentation
	?? character to explore source code
	tab key for autocompletion
in python you can do help()
	you can also do len?
	it even works for functions you create
Tab completion is also useful when importing objects from packages.
IPython provides a means of wildcard matching for names using the * character.
	use this when you know the middle or end of the thing you're looking for

1.02
Shortcuts in the iPython shell
-theres a lot of shortcuts you can find them in 1.02

1.03
Magic commands in iPython - prefixed by %
when copy pasting code into it, do %paste
	you can always to %magicommand?
%history -n 1-4
1.04
In and Out are variables created by iPython and you can do print(In) and print(Out) to see all the things
you typed in before.
Access previous output with _ you can also do ____
1.05
Shell and shell command stuff
Any command that works at the command-line can be used in IPython by prefixing it with the ! character
Passing Values to and from the Shell
1.06
Errors and debugging
Lists debug commands and how to debug and deal with errors
1.07
Profiling and Timin code
Magic commands
	times how much time it takes for a function
1.08
resources and stuff

2.00
NumPY
-Chapter 2 and 3 both outline techniques for effectively loading, storing, and manipulating in-memory data in Python.
-Images can be thought as two-dimensional arrays
-import numPY

2.01
-effective data-driven science and cmoputation requires understanding of how data is stored and manipulated.
- statically typed language like java or C is different from Python (dynamically typed) since variables are defined
- Python integers are more than just an integer. (explained)
- Python list is more than just a list
- Numpy arrays make it more easy to read.
- Arrays and Lists conversion
- Numpy standard data times

2.02
NUMPY ARRAYS
- Array Attributes
	- 1, 2, 3 dimensional
	- x1 = np.random.randint(10, size=6)
	- x2 = np.random.randint(10, size=(3,4))
	- x3 = np.random.randint(10, size=(3, 4, 5))
	- x3.ndim - dimensions
	- x3.shape - the size of each dimension
	- x3.size - total size of array
- Array Accessing
	- x1 just prints it
	- x1[0] prints the first digit and so on
	- x1[-1] indexes from the end of the array.
- array tricks
	- x = np.arange(10)
		- does order
	- x[:5] does first five elements
	- x[4:7] does middle sub array
	- x[::2] every other element
	- x[1::2] every other element starting at index 1
	- x[::-1] all elements reversed
	-MULTI-DIMENSIONAL subarray:
		-x2[:3, ::2] all rows, every other column.
- ton of other array stuff

2.03
Computation on NumPY Arrays: Universal Functions
- numPY UFuncs
	- arithmetic
	- arranging
	- adding
	- trig and a lot of other math stuff
	- Specifing output
	- Aggregates
	- Outer products

2.04
Aggregations: Min, Max, everything in between
	- summing is just sum
	- min and max of arrays
	- aggregate stuff
		- median, percentile
	- Height of US president functions in chapter

2.05
Broadcasting
- A set of rules for applying binary ufuncs on arrays of different sizes
- adding arrays together and stuff
- RULES OF BROADCASTING
- plotting 2d function

2.06
Comparisons, Masks, Boolean Logic
- == is np.equal
- < np.less
- > np.greater
- != np.not_equal
- <= np.less_equal
- >= np.greater_equal
- Count number of True entries in a BOolean array, use np.count_nonzero
Boolean Operators
- np.sum((inches > 0.5) & (inches < 1))
- you can have array x and do x < 5 and it will print out a array with all booleans saying true or false.
- you can use and or

2.07
Fancy Indezing
Indices - arr[0]
slices - arr[:5]
masks - arr[arr >0]

Fancy indexing is passing array of indicies to access multiple array elements at once.
-selecting random points
-bining data

2.08
Sorting Arrays
- Algorithms related to sorting values in Numpy Arrays
Insertion sorts, slection sorts, merge sorts, quick sorts, bubble sorts, etc.
Selection sort repeatedly finds the minimum value from a list and makes swaps until the list is sorted.
-Fast sorting in NumPy- np.sort and np.argsort
- to return a sorted version of an array without modifying input, use np.osrt
- argsort returns the indicies of sorted elements

Sorting along rows or columns
- Sort each column of X
	np.sort(x, axis = 0)
Sort each row of X
	np.sort(x, axis = 1)
Parititining
k-Nearest Neighbors
Big-O notation

2.09
Structered Data: NumPy's structured Arrays
sructed and record arrays provide efficient storage for compund, heterogenous data.
Structered array example and creating structured arrays
Compound types
RecordArrays - is almost identical to compound arrays, but fields can be accessed as attributes rather than as dictionary keys.


2.08
	